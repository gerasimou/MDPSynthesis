#Note: Automatic transformation of QoS requirements to constraints and minimisation/maximisation objectives
#      is currently under development. For the time being, the user should define the constraints & objectives 
#	   within the appropriate properties (e.g., pctl, csl) file.

#Step 1:Set the probabilistic model template and the probabilistic temporal logic formulae files of the problem
PROBLEM = DPM
#FX
#	MODEL_TEMPLATE_FILE = models/FX/fxSmall.pm
#	PROPERTIES_FILE = models/FX/fxSmall.pctl
#DPM
	MODEL_TEMPLATE_FILE = models/DPMParam/dpmSmall.pm
	PROPERTIES_FILE = models/DPMParam/dpmSmall.csl
#Zeroconf
	#MODEL_TEMPLATE_FILE = models/Zeroconf/zeroconf.pm
	#PROPERTIES_FILE = models/Zeroconf/zeroconf.pctl
#COPE
#	MODEL_TEMPLATE_FILE = models/COPE/copeModel.pm
#	PROPERTIES_FILE = models/cope/copeProperties.pctl
#DIE
#	MODEL_TEMPLATE_FILE = models/dieParam/die.pm
#	PROPERTIES_FILE = models/dieParam/die.pctl
#ePMC
#	MODEL_TEMPLATE_FILE = models/ePMC/epmc.pm
#	PROPERTIES_FILE = models/ePMC/epmc.pctl
#Virus
#	MODEL_TEMPLATE_FILE = models/VirusHAIQ/virus-evolvableparameter.pm
#	PROPERTIES_FILE = models/VirusHAIQ/virus.pctl
#Google
#	MODEL_TEMPLATE_FILE = models/Google/googleTemplate.sm
#	PROPERTIES_FILE 	= models/Google/google.csl
#Cobot
#	MODEL_TEMPLATE_FILE = models/Cobot/teconnex07.pm
#	PROPERTIES_FILE 	= models/Cobot/teconnex05.pctl

#Step2 : Set the algorithm (MOGA or Random) to run
	#ALGORITHM = RANDOM
	ALGORITHM = NSGAII
	#ALGORITHM = SPEA2
	#ALGORITHM = MOCELL

#Step 3: Set the population for the MOGAs
	POPULATION_SIZE = 20
	

#Step 4: Set the maximum number of evaluations
	MAX_EVALUATIONS = 200


#Step 5: Set the number of processors (for parallel execution)
	PROCESSORS = 1


#Step 6: Set plotting settings 
	#Note: requires Python3
	PLOT_PARETO_FRONT = true
	PYTHON3_DIRECTORY = /usr/local/bin/python3


#Step 7: Set additional settings
	VERBOSE = true
	
	#Which EvoChecker engine should be used: Options: NORMAL, PARAMETRIC
	#If is absent the normal EvoChecker will be used
	EVOCHECKER_TYPE = NORMAL
	EVOCHECKER_ENGINE = PRISM
	


#Step 8: Run 
	# Within your main class do:
	
	# 1) Create EvoChecker instance
	#    EvoChecker ec = new EvoChecker();
	#
	# 2) Set configuration file
	#	String configFile ="resources/config.properties"; 
	#	ec.setConfigurationFile(configFile);
	#
	# 3) Start EvoChecker
	#    ec.start();
		

#############################################################3
#Advanced Settings (do not edit)
#	JAVA=/Library/Java/JavaVirtualMachines/openjdk-11.0.2.jdk/Contents/Home/bin/java

#	INIT_PORT = 8860

#	MODEL_CHECKING_ENGINE = libs/PrismExecutor.jar

#	MODEL_CHECKING_ENGINE_LIBS_DIRECTORY = libs/runtime

